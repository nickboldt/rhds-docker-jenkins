# First, install docker for you platform: 
# https://docs.docker.com/
# 
# Then run this docker image:
# sudo docker run -p 8080:8080 -p 50000:50000 -v ${HOME}/fedora-docker-jenkins-home:/var/jenkins_home -f Dockerfile.Fedora24.slave jenkins 
# 
# Finally, open your Jenkins instance in a browser:
# http://localhost:8080/
# 
# To browse the contents of the docker image:
# http://www.asktomash.com/create-jenkins-docker-container-and-run-first-maven-job-in-less-than-10-minutes/
# docker run -t -u root -i jenkins /bin/bash

FROM fedora:latest
MAINTAINER nboldt@redhat.com
# thx to https://github.com/Signiant/docker-jenkins-fedora-base-Fedora-19-based-

# Add our bldmgr user
ENV BUILD_USER bldmgr
ENV BUILD_PASS bldmgr
ENV BUILD_USER_ID 10012
ENV BUILD_USER_GROUP users
ENV BUILD_DOCKER_GROUP docker
ENV BUILD_DOCKER_GROUP_ID 1001

# Create the docker group
RUN groupadd -g $BUILD_DOCKER_GROUP_ID $BUILD_DOCKER_GROUP

RUN adduser -u $BUILD_USER_ID -g $BUILD_USER_GROUP $BUILD_USER

#RUN passwd -f -u $BUILD_USER
RUN echo $BUILD_USER:$BUILD_PASS |chpasswd

# Add the user to the docker group
RUN usermod -a -G $BUILD_DOCKER_GROUP $BUILD_USER

RUN dnf install -y http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm 
RUN dnf install -y http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

COPY yum.repos.d/rh-eclipse46.repo /etc/yum.repos.d/
COPY yum.repos.d/docker-main-f24.repo /etc/yum.repos.d/

# Install a base set of packages from the default repo
COPY yum-packages.list /tmp/yum.packages.list
RUN chmod +r /tmp/yum.packages.list
RUN dnf install -y `cat /tmp/yum.packages.list`; exit 0

# Install openjdk 
ENV JAVA_HOME /usr/java/latest
RUN alternatives --install /usr/bin/java jar /usr/java/latest/bin/java 200000
RUN alternatives --install /usr/bin/javaws javaws /usr/java/latest/bin/javaws 200000
RUN alternatives --install /usr/bin/javac javac /usr/java/latest/bin/javac 200000

# Install maven
ENV MAVEN_VERSION 3.3.9
RUN curl -fsSL http://archive.apache.org/dist/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar xzf - -C /usr/share \
  && mv /usr/share/apache-maven-$MAVEN_VERSION /usr/share/maven \
  && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn
ENV MAVEN_HOME /usr/share/maven

# Install pip
RUN cd /tmp && \
    wget https://bootstrap.pypa.io/get-pip.py && \
    python2.7 ./get-pip.py

# Create the folder we use for Jenkins workspaces across all nodes
RUN mkdir -p /var/lib/jenkins
RUN chown -R $BUILD_USER:$BUILD_USER_GROUP /var/lib/jenkins

# Add in our common jenkins node tools for bldmgr
COPY jenkins_nodes /home/$BUILD_USER/jenkins_nodes

# Make our build user require no tty
RUN echo "Defaults:$BUILD_USER !requiretty" >> /etc/sudoers

# Add user to sudoers with NOPASSWD
RUN echo "$BUILD_USER ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Install and configure SSHD (needed by the Jenkins slave-on-demand plugin)
RUN ssh-keygen -q -N "" -t dsa -f /etc/ssh/ssh_host_dsa_key
RUN ssh-keygen -q -N "" -t rsa -f /etc/ssh/ssh_host_rsa_key
RUN sed -ri 's/session    required     pam_loginuid.so/#session    required     pam_loginuid.so/g' /etc/pam.d/sshd
RUN sed -ri 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/g' /etc/ssh/sshd_config
RUN mkdir -p /home/$BUILD_USER/.ssh
RUN chown -R $BUILD_USER:$BUILD_USER_GROUP /home/$BUILD_USER
RUN chmod 700 /home/$BUILD_USER/.ssh

EXPOSE 22

# This entry will either run this container as a jenkins slave or just start SSHD
# If we're using the slave-on-demand, we start with SSH (the default)

# Default Jenkins Slave Name
ENV SLAVE_ID FEDORA_NODE
ENV SLAVE_OS Linux

ADD start.sh /
RUN chmod 777 /start-slave.sh

CMD ["sh", "/start-slave.sh"]